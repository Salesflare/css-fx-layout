@use "sass:list";

@import "mixins";

/// Includes selectors for attributes which can be used to add a specific gap to elements in a flex container
///
/// @param {number} $value
///   Will start generating selectors for $value $gapUnits
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
/// @param {string} $name
///   Will generate selectors for a specific media size, e.g. xs, sm, md, ...
@mixin layout-gap-attribute($value, $gapUnits, $name: false) {
	@each $unit in $gapUnits {
		*[data-layout-gap#{if($name, '-' + $name, '')}="#{$value}#{$unit}"] {
			gap: #{$value}#{$unit};
		}
	}
}

/// Includes selectors for attributes which can be used to add a gap to elements in a flex container
///
/// @param {number} $from
///   Will start generating selectors from $from $gapUnits, $from can also be used as a value list to generate value $gapUnits for every value in $from
/// @param {number} $to
///   Will generate selectors until including $to $gapUnits
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
/// @param {bool} $includeSelectorsForMediaSizes
///	  Will generate additional selectors for flex layout media sizes
@mixin layout-gap-attributes($from: 1, $to: 24, $gapUnits: px em rem, $includeSelectorsForMediaSizes: true) {
	@if (list.length($from) > 1) {
		@each $i in $from {
			@include layout-gap-attribute($i, $gapUnits)
		}
	} @else {
		@for $i from $from through $to {
			@include layout-gap-attribute($i, $gapUnits)
		}
	}
	@if $includeSelectorsForMediaSizes {
		@each $name, $_ in $flex-layout-media-queries {
			@include flex-layout-media($name) {
				@if (list.length($from) > 1) {
					@each $i in $from {
						@include layout-gap-attribute($i, $gapUnits, $name)
					}
				} @else {
					@for $i from $from through $to {
						@include layout-gap-attribute($i, $gapUnits, $name)
					}
				}
			}
		}
	}
}
